{"ast":null,"code":"var _jsxFileName = \"/home/jorgo/Desktop/MythosReservierungsTool/reservations-frontend/src/components/ReservationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReservationList = ({\n  selectedDate\n}) => {\n  _s();\n  const [reservations, setReservations] = useState([]);\n  useEffect(() => {\n    fetchReservations(selectedDate);\n  }, [selectedDate]);\n  const fetchReservations = async date => {\n    try {\n      const formattedDate = formatDate(date); // Funktion, die das Datum formatiert\n      const response = await fetch(`http://localhost:5000/api/reservations?date=${formattedDate}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      const sortedReservations = data.sort((a, b) => a.time.localeCompare(b.time));\n      setReservations(sortedReservations);\n    } catch (error) {\n      console.error('Error fetching reservations:', error);\n    }\n  };\n  const formatDate = date => {\n    const d = new Date(date);\n    const formattedDate = `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`;\n    return formattedDate;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reservation-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Reservierungen f\\xFCr \", formatDate(selectedDate)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: reservations.length > 0 ? reservations.map(reservation => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Zeit: \", reservation.time, \", Kunde: \", reservation.customer_name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Mitarbeiter: \", reservation.employee_name, \", G\\xE4ste: \", reservation.guest_count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Tisch: \", reservation.table_number, \", Telefon: \", reservation.phone_number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this)]\n      }, reservation.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Keine Reservierungen f\\xFCr dieses Datum.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ReservationList, \"n1GCS9VJe9p98Kw6tsz1Wmk1YmA=\");\n_c = ReservationList;\nexport default ReservationList;\nvar _c;\n$RefreshReg$(_c, \"ReservationList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ReservationList","selectedDate","_s","reservations","setReservations","fetchReservations","date","formattedDate","formatDate","response","fetch","ok","Error","data","json","sortedReservations","sort","a","b","time","localeCompare","error","console","d","Date","getDate","getMonth","getFullYear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","reservation","customer_name","employee_name","guest_count","table_number","phone_number","id","_c","$RefreshReg$"],"sources":["/home/jorgo/Desktop/MythosReservierungsTool/reservations-frontend/src/components/ReservationList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ReservationList = ({ selectedDate }) => {\n  const [reservations, setReservations] = useState([]);\n\n  useEffect(() => {\n    fetchReservations(selectedDate);\n  }, [selectedDate]);\n\n  const fetchReservations = async (date) => {\n    try {\n      const formattedDate = formatDate(date); // Funktion, die das Datum formatiert\n      const response = await fetch(`http://localhost:5000/api/reservations?date=${formattedDate}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      const sortedReservations = data.sort((a, b) => a.time.localeCompare(b.time));\n      setReservations(sortedReservations);\n    } catch (error) {\n      console.error('Error fetching reservations:', error);\n    }\n  };\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    const formattedDate = `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`;\n    return formattedDate;\n  };\n\n  return (\n    <div className=\"reservation-list\">\n      <h2>Reservierungen für {formatDate(selectedDate)}</h2>\n      <ul>\n        {reservations.length > 0 ? (\n          reservations.map((reservation) => (\n            <li key={reservation.id}>\n              <p>Zeit: {reservation.time}, Kunde: {reservation.customer_name}</p>\n              <p>Mitarbeiter: {reservation.employee_name}, Gäste: {reservation.guest_count}</p>\n              <p>Tisch: {reservation.table_number}, Telefon: {reservation.phone_number}</p>\n            </li>\n          ))\n        ) : (\n          <p>Keine Reservierungen für dieses Datum.</p>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default ReservationList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}